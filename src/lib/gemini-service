import { GoogleGenerativeAI } from '@google/generative-ai';
import { TranslationCache } from './cache';
import { AITranslator, TranslationOptions } from './types';

export class GeminiService implements AITranslator {
  private model: any;
  private cache: TranslationCache;
  private readonly MAX_CHUNK_LENGTH = 2500; // الحد الأقصى لطول النص في كل طلب

  constructor(apiKey: string) {
    if (!apiKey) {
      throw new Error('مفتاح API مطلوب لخدمة Gemini');
    }
    try {
      const genAI = new GoogleGenerativeAI(apiKey);
      this.model = genAI.getGenerativeModel({ model: 'gemini-pro' });
      this.cache = new TranslationCache();
    } catch (error) {
      console.error('خطأ في تهيئة خدمة Gemini:', error);
      throw new Error(`فشل في تهيئة خدمة الترجمة: ${error.message}`);
    }
  }

  isConfigured(): boolean {
    return !!this.model;
  }

  /**
   * ترجمة النص الكامل مع التعامل مع الأجزاء الطويلة
   */
  async translate(text: string, options: TranslationOptions): Promise<string> {
    if (!this.isConfigured()) {
      throw new Error('خدمة الترجمة غير مهيأة');
    }

    if (!text?.trim()) {
      throw new Error('النص المدخل فارغ');
    }

    const { fromLang, toLang, characters } = options;

    try {
      // تقسيم النص إلى أجزاء إذا كان طويلاً
      const chunks = this.splitTextIntoChunks(text);
      const translations = await Promise.all(
        chunks.map(chunk => this.translateChunk(chunk, fromLang, toLang, characters))
      );

      return translations.join('\\n');
    } catch (error) {
      console.error('خطأ في الترجمة:', {
        error,
        text: text.substring(0, 100) + '...',
        fromLang,
        toLang
      });
      
      if (error.message.includes('API_KEY')) {
        throw new Error('مفتاح API غير صالح أو منتهي الصلاحية');
      }
      
      if (error.message.includes('PERMISSION_DENIED')) {
        throw new Error('ليس لديك صلاحية للوصول إلى خدمة الترجمة');
      }
      
      if (error.message.includes('QUOTA_EXCEEDED')) {
        throw new Error('تم تجاوز حد الاستخدام المسموح به');
      }

      throw new Error(`فشل في الترجمة: ${error.message}`);
    }
  }

  /**
   * ترجمة جزء واحد من النص
   */
  private async translateChunk(
    chunk: string,
    fromLang: string,
    toLang: string,
    characters?: Record<string, 'male' | 'female'>
  ): Promise<string> {
    const cacheKey = `${chunk}_${fromLang}_${toLang}`;
    const cached = this.cache.get(chunk, fromLang, toLang);
    if (cached) {
      console.log('استخدام ترجمة مخزنة مؤقتاً');
      return cached;
    }

    try {
      let prompt = `
        أنت مترجم محترف. قم بترجمة النص التالي من ${fromLang} إلى ${toLang}.
        حافظ على التنسيق والمعنى الأصلي. لا تضف أي نص إضافي أو تعليقات.
        
        النص:
        ${chunk}
      `;

      if (characters && Object.keys(characters).length > 0) {
        prompt += '\n\nUse these character genders for proper translation:\n';
        Object.entries(characters).forEach(([name, gender]) => {
          prompt += `- "${name}" is ${gender}\n`;
        });
      }

      const result = await this.model.generateContent(prompt);
      if (!result?.response) {
        throw new Error('لم يتم استلام رد من خدمة الترجمة');
      }

      const response = await result.response;
      const translation = response.text().trim();
      if (!translation) {
        throw new Error('الترجمة المستلمة فارغة');
      }

      // تخزين الترجمة في الذاكرة المؤقتة
      this.cache.set(chunk, fromLang, toLang, translation);
      
      return translation;
    } catch (error) {
      console.error('خطأ في ترجمة الجزء:', {
        error,
        chunkLength: chunk.length,
        fromLang,
        toLang
      });
      throw error;
    }
  }

  /**
   * تقسيم النص إلى أجزاء مع الحفاظ على سلامة الجمل والفقرات
   */
  private splitTextIntoChunks(text: string): string[] {
    if (text.length <= this.MAX_CHUNK_LENGTH) {
      return [text];
    }

    const chunks: string[] = [];
    let currentChunk = '';

    const sentences = text.split(/([.!?]\s+)/);
    
    for (const sentence of sentences) {
      if ((currentChunk + sentence).length > this.MAX_CHUNK_LENGTH) {
        if (currentChunk) {
          chunks.push(currentChunk.trim());
          currentChunk = '';
        }
        if (sentence.length > this.MAX_CHUNK_LENGTH) {
          // تقسيم الجملة الطويلة إلى أجزاء أصغر
          const words = sentence.split(' ');
          let tempChunk = '';
          for (const word of words) {
            if ((tempChunk + ' ' + word).length > this.MAX_CHUNK_LENGTH) {
              chunks.push(tempChunk.trim());
              tempChunk = word;
            } else {
              tempChunk += (tempChunk ? ' ' : '') + word;
            }
          }
          if (tempChunk) {
            currentChunk = tempChunk;
          }
        } else {
          currentChunk = sentence;
        }
      } else {
        currentChunk += sentence;
      }
    }

    if (currentChunk) {
      chunks.push(currentChunk.trim());
    }

    return chunks;
  }
}
